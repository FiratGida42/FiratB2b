"""create_order_and_order_item_tables

Revision ID: e54b06bcb918
Revises: bfcf32ef46ea
Create Date: 2025-05-21 14:20:18.754955

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# b2b_web_app.models içerisinden PyOrderStatusEnum'u import etmemiz gerekebilir
# Alembic script'leri genellikle projenin kökünden çalıştırıldığı için,
# sys.path ayarlaması gerekebilir ya da alembic/env.py içinde bu ayar vardır.
# Şimdilik doğrudan import etmeyi deneyelim, eğer alembic/env.py'de
# b2b_web_app sys.path'e eklenmişse çalışacaktır.
# Eğer çalışmazsa, enum'u burada string olarak tanımlayabiliriz ya da env.py'yi kontrol ederiz.
from b2b_web_app.models import PyOrderStatusEnum


# revision identifiers, used by Alembic.
revision: str = 'e54b06bcb918'
down_revision: Union[str, None] = 'bfcf32ef46ea' # Bir önceki migrasyonunuzun ID'si
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = sa.inspect(bind)

    # Önce order_items'ı silmeliyiz çünkü orders'a foreign key'i var.
    if 'order_items' in inspector.get_table_names():
        # Var olan indexleri de düşürmek gerekebilir, drop_table bunu otomatik yapmayabilir.
        # Ancak bu migrasyonun downgrade'i zaten indexleri düşürüyor,
        # ve bu tablo daha önceki bir migrasyonla (5dea7b8db338) oluşturulduysa,
        # o migrasyonun downgrade'i de indexleri düşürmeli.
        # Şimdilik sadece tabloyu düşürelim. Gerekirse index dropları eklenebilir.
        op.drop_table('order_items')
    
    if 'orders' in inspector.get_table_names():
        op.drop_table('orders')

    op.create_table('orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('customer_name', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('total_amount', sa.Float(), nullable=False),
    sa.Column('status', sa.Enum(PyOrderStatusEnum, name='order_status_enum_native', native_enum=True), nullable=False, index=True, default=PyOrderStatusEnum.PENDING.value), # native_enum=True SQLite için önemli olabilir, default'u value olarak verdik
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    # SQLite için status sütununa index manuel olarak eklenebilir, modelde index=True olmasına rağmen Alembic bazen eklemeyebilir.
    # op.create_index(op.f('ix_orders_status'), 'orders', ['status'], unique=False) # Zaten yukarıda index=True ile tanımlı

    op.create_table('order_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('product_code', sa.String(length=100), nullable=False),
    sa.Column('product_name', sa.String(length=255), nullable=False),
    sa.Column('barcode', sa.String(length=255), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_items_id'), 'order_items', ['id'], unique=False)
    op.create_index(op.f('ix_order_items_product_code'), 'order_items', ['product_code'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_order_items_product_code'), table_name='order_items')
    op.drop_index(op.f('ix_order_items_id'), table_name='order_items')
    op.drop_table('order_items')
    # op.drop_index(op.f('ix_orders_status'), table_name='orders') # Eğer yukarıda oluşturulduysa
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.drop_table('orders')
    # Enum tipini de silmek gerekebilir, eğer veritabanı destekliyorsa ve ayrı bir tip olarak oluşturulduysa
    # Örnek PostgreSQL için: PyOrderStatusEnum(name='order_status_enum_native').drop(op.get_bind(), checkfirst=False)
    # SQLite için genellikle bu adım gerekmez çünkü Enum string olarak saklanır veya CHECK constraint ile yönetilir.
    # `sa.Enum(PyOrderStatusEnum, name='order_status_enum_native', native_enum=True)` kullandığımız için
    # SQLite bunu TEXT olarak saklar ve CHECK constraint ekler. `native_enum=False` (varsayılan) olsaydı sadece string olurdu.
    # Bu nedenle özel bir enum drop komutuna SQLite için gerek yok.
    # ### end Alembic commands ###
